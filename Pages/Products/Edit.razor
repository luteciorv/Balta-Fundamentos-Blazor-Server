@page "/products/edit/{id:int}"

@using BlazingShop.Data
@using BlazingShop.Models
@using Microsoft.EntityFrameworkCore

@inject AppDbContext _context;
@inject NavigationManager _navigationManager;


<h2>Editar o produto @_model?.Title</h2>

<EditForm Model="_model" OnValidSubmit="@HandleSubmitAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="Title" class="form-label">Título</label>
        <InputText class="form-control" type="text" id="Title" @bind-Value="_model.Title" />
    </div>

    <div class="mb-3">
        <label for="Price" class="form-label">Preço</label>
        <InputNumber class="form-control" type="number" id="Price" @bind-Value="_model.Price" />
    </div>

    <div class="mb-3">
        <label for="CategoryId" class="form-label">Categoria</label>
        <InputSelect class="form-select" id="CategoryId" @bind-Value="_model.CategoryId">
            @foreach (var category in _categories)
            {
                <option value="@category.Id">
                    @category.Title
                </option>
            }
        </InputSelect>
    </div>

    @if (_errorMessage is not null)
    {
        <div class="mb-3 alert alert-danger" role="alert">
            @_errorMessage
        </div>
    }

    <div class="mb-3">
        <button class="btn btn-outline-success" type="submit">Atualizar</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    private Product? _model = new();
    private List<Category> _categories = new();
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        _categories = await _context.Categories.AsNoTracking().OrderBy(c => c.Title).ToListAsync();
        _model = await _context.Products.AsNoTracking().FirstOrDefaultAsync(p => p.Id == Id);
    }

    private async Task HandleSubmitAsync()
    {
        try
        {
            var product = await _context.Products.FirstOrDefaultAsync(p => p.Id == Id);
            if (product is null) throw new Exception($"O produto de id {Id} não foi encontrado");

            product.Title = _model!.Title;
            product.Price = _model!.Price;
            product.CategoryId = _model!.CategoryId;

            _context.Products.Update(product);
            await _context.SaveChangesAsync();

            _navigationManager.NavigateTo("/products");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Não foi possível atualizar os dados do produto. Erro: {ex.Message}";
        }
    }
}